---
title: "ScratchPaper"
format: html
editor: visual
---

# Libraries
```{r}
library(tidyverse)
library(jsonlite)
library(httr)
```

# API

```{r Dnd api}
key<- get("ghost.r")
apiJSON<-GET("https://api.open5e.com/v1/spells/?search=fire")
#test<-parse_json(apiJSON)
```

``` {r Retrieve spells list}
#get_spells<- function(apiJSON,...){
  
parsed<- fromJSON(rawToChar(apiJSON$content),simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)|>
  map_if(is.data.frame,list)|>
  map_if(is.null,list)|>
  as_tibble()|>
  unnest(results)|>
  unnest(spell_lists)|>
  select(everything(),-c(dnd_class,count,'next',previous,slug,document__license_url,document__url))|>
  rename("class"="spell_lists")|>
  select(name,class,school,range,everything())
  
#return(parsed)
#}

#get_spells(apiJSON)
```

```{r search classes}
apiJSON2<-GET("https://www.dnd5eapi.co/api/classes/monk")
classes<-fromJSON(rawToChar(apiJSON2$content),simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)|>
  map_if(is.data.frame,list)|>
  as.tibble()
for (i in 1:length(classes)) {
  if(is.list(classes[i])){
    classes<- classes|>
      unnest(i,names_sep = "_")
  }
  else if (is.null(classes[i])) {
    classes<- classes|>
      select(-c(i),everything())
  }
}

class(classes$proficiency_choices)
```

use this... potential
```{r}
testapi<-GET("http://api.datausa.io/api/?show=geo&sumlevel=state&required=avg_wage")
testparse<-fromJSON(rawToChar(testapi$content))|>
  map_if(is.data.frame,list)|>
  as_tibble()|>
  unnest(c(data,source),names_sep = "_")|>
  unnest(source_annotations,names_sep = "_")

```

```{r make url}
getAPIdata<- function(drilldown = NULL, measures = NULL, year = NULL){
  if(is.null(drilldown)){
    data <- GET("https://datausa.io/api/data?drilldowns=State&measures=Population")
  }
}
```

