---
title: "ScratchPaper"
format: html
editor: visual
---

# Libraries
```{r}
library(tidyverse)
library(jsonlite)
library(httr)
```

# API

```{r nationalparks key}
key<- as.character(source("ghost.r")[1])
```


Get ALL parkIDs

```{r Get Park IDs}
#getParks<-function(key = as.character(source("ghost.r")[1])){
  allStates<-c("AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL",
               "IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT",
               "NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI",
               "SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY","DC","GU",
               "MP","PR","VI")
  total<-as_tibble(NULL)
  for (i in 1:length(allStates)) {
    apiParks<-GET(paste("https://developer.nps.gov/api/v1/parks?stateCode=",
                        allStates[i],
                        "&api_key=",
                        key,sep = ""))
    raw_ParkIDs<- fromJSON(rawToChar(apiParks$content))
    data_Parks<- raw_ParkIDs$data|>
      separate_longer_delim(states, delim = ",")|>
      select(c(fullName,parkCode,description,states,id,latitude,longitude))
    total<-bind_rows(total,data_Parks)
  }
  
  # return(total)
  # }
```

1. retrieve articles by state 

```{r Retrieve Articles}
# apiART <- GET(paste("https://developer.nps.gov/api/v1/articles?stateCode=AZ",
#           "&api_key=",
#           key,
#           sep = ""))
getArticles<-function(url){
  apiART<-GET(url)
  art_parsed <- fromJSON(rawToChar(apiART$content),flatten = TRUE)|>
    as_tibble()
  art_parsed<-art_parsed$data|>
    map_if(is.data.frame,list)|>
    map_if(is.null,list)|>
    as_tibble()|>
    unnest(relatedParks,names_sep = "_")|>
    unnest(tags)|>
    rename("parkCode"="relatedParks_parkCode")
}
```


```{r retrieve campgrounds info, eval=FALSE}
# apiCamp <- GET(paste("https://developer.nps.gov/api/v1/campgrounds?stateCode=WY",
#           "&api_key=",
#           key$value,
#           sep = ""))
getCamp<-function(url){
  apiCamp<-GET(url)
  camp_parsed <- fromJSON(rawToChar(apiCamp$content),flatten = TRUE)|>
    as_tibble()
  camp_parsed<-camp_parsed$data|>
    map_if(is.data.frame,list)|>
    map_if(is.null,list)|>
    as_tibble()|>
    select(-c(8:9,11:13,19,20,23,24,27:29))|>
    select(parkCode,everything())
  
  for (i in 1:100) {
    if(i <= length(camp_parsed)){
      if(is.list(camp_parsed[i])){
        camp_parsed<-camp_parsed|>
          unnest(i,names_sep = "_")
        }
      }
    else{
      break
      }
  }
  camp_parsed<-camp_parsed|>
    select(-c(operatingHours_exceptions))
  return(camp_parsed)
  }

```



2. search national parks by Alerts

```{r Retrieve Alerts}

 # apiJSON<-GET(paste("https://developer.nps.gov/api/v1/alerts?stateCode=NC&api_key=",key$value,sep = ""))
getAlerts<-function(url){
  apiJSON<-GET(url)
  parsed<- fromJSON(rawToChar(apiJSON$content),flatten = TRUE)|>
    as_tibble()
  
  parsedData<-parsed$data|>
    map_if(is.data.frame,list)|>
    map_if(is.null,list)|>
    as_tibble()|>
    unnest(relatedRoadEvents,names_sep = "_")|>
    select(parkCode,everything())
  return(parsedData)
  }
```





Join function by park code

```{r retreive names of parks,eval=FALSE}
name_Parks<- function(state, key=as.character(source("ghost.r")[1])){
  apiParks<-GET(
    paste(
      "https://developer.nps.gov/api/v1/parks?stateCode=",
      state,
      "&api_key=",
      key,
      sep = "")
    )
  raw_ParkIDs<- fromJSON(rawToChar(apiParks$content))
  data_Parks<- raw_ParkIDs$data|>
    select(c(fullName,parkCode,description,states,id))
  return(data_Parks)
  }
```

4. Wrapper function to pull together
```{r}
my_wrapper<- function (keyword, stateCode = "NC", key=as.character(source("ghost.r")[1]),parkCodes=total){
  y<- NULL
  newUrl <- paste("https://developer.nps.gov/api/v1/",
                  keyword,
                  "?stateCode=",
                  stateCode,
                  "&api_key=",
                  key,
                  sep = "")
  ifelse(keyword == "alerts",
         y<-getAlerts(newUrl),
         ifelse(keyword=="articles",
                y<-getArticles(newUrl),
                stop("Error in keyword, Please choose 'alerts' or 'articles'")
                )
         )
  x<-parkCodes
  cleaned<-right_join(x, y , by = "parkCode",keep = FALSE, relationship = "many-to-many")|>
    filter(states == stateCode)|>
    distinct(title,.keep_all = TRUE)
  return(cleaned)
  }
```

```{r}
my_wrapper("alerts","CA")
```

contingency tables

```{r }
totalNumberOfAlerts<-my_wrapper("alerts","WY")|>
  count(fullName,name = "count")

getNumAlerts<- function(.d){
  .d<-.d|>
    count(fullName, name = "count")
  return(.d)
}

x<-getNumAlerts(my_wrapper("alerts","AZ"))

numberOfAlertsByCategory<-test|>
  count(category,fullName,name="count")

getNumAlertsCat<- function(.d){
  .d<-.d|>
    count(category,fullName, name = "count")
  return(.d)
}

totalArticlesByPark<-my_wrapper("articles","VA")|>
  count(fullName,name = "count")

getTotArt<- function(.d){
  .d<-.d|>
    count(fullName,name = "count")
  return(.d)
}

totalArticlesByTag<-my_wrapper("articles","VA")|>
  count(fullName,tags,name = "count")


getArtTags<- function(.d){
  .d<-.d|>
    count(fullName,tags,name = "count")
  return(.d)
}

```

```{r plots}

test4<-getTotArt(my_wrapper("articles","PA"))
g1<-ggplot(test4,aes(fullName,count, fill = fullName))
g1 +
  geom_bar(stat = "identity")+  
  theme(legend.position = "none", 
        axis.text.x = element_text(angle=45,
                                   vjust = 1,
                                   hjust = 1))+
  labs(title = "Total Aricles by National Park",
       x = "National Park",
       y = "Number of Articles")+
  scale_x_discrete(labels= str_wrap(c(test4$fullName),width = 25))+
  scale_y_continuous(expand = expansion())

test5<-getArtTags(my_wrapper("articles","PA"))
g2<-ggplot(test5,aes(tags,count,fill=tags))

g2+
  geom_bar(stat = "identity")+
  geom_text(aes(label = count),
            vjust = 1,
            size = 2.5)+
  theme(legend.position = "right",
        legend.text = element_text(size=6),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())+
  #guides(color=guide_legend(nrow = 2))+
  labs(title = "Total Atricles by National Park",
       x = "Article Tags",
       y = "Number of Articles")+
    scale_fill_discrete(labels = str_wrap(c(test5$tags),width = 25))+
    scale_x_discrete(expand = expansion())+
    scale_y_continuous(expand = expansion())

```




