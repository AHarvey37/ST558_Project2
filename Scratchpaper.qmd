---
title: "ScratchPaper"
format: html
editor: visual
---

# Libraries
```{r}
library(tidyverse)
library(jsonlite)
library(httr)
```

# API

```{r Dnd api}
key<- source("ghost.r")
```


1. Camp information by national parks by state
```{r}
# apiCamp <- GET(paste("https://developer.nps.gov/api/v1/campgrounds?stateCode=WY",
#           "&api_key=",
#           key$value,
#           sep = ""))
getCamp<-function(url){
  apiCamp<-GET(url)
  camp_parsed <- fromJSON(rawToChar(apiCamp$content),flatten = TRUE)|>
    as_tibble()
  camp_parsed<-camp_parsed$data|>
    map_if(is.data.frame,list)|>
    map_if(is.null,list)|>
    as_tibble()|>
    select(-c(8:9,11:13,19,20,23,24,27:29))|>
    select(parkCode,everything())
  
  for (i in 1:100) {
    if(i <= length(camp_parsed)){
      if(is.list(camp_parsed[i])){
        camp_parsed<-camp_parsed|>
          unnest(i,names_sep = "_")
        }
      }
    else{
      break
      }
  }
  camp_parsed<-camp_parsed|>
    select(-c(operatingHours_exceptions))
  return(camp_parsed)
  }

```



2. search national parks by Alerts
``` {r Retrieve spells list}

 # apiJSON<-GET(paste("https://developer.nps.gov/api/v1/alerts?stateCode=NC&api_key=",key$value,sep = ""))
getAlerts<-function(url){
  apiJSON<-GET(url)
  parsed<- fromJSON(rawToChar(apiJSON$content),flatten = TRUE)|>
    as_tibble()
  
  parsedData<-parsed$data|>
    map_if(is.data.frame,list)|>
    map_if(is.null,list)|>
    as_tibble()|>
    unnest(relatedRoadEvents,names_sep = "_")|>
    select(parkCode,everything())
  return(parsedData)
  }
```


get parkIDs

```{r}
apiParks<-GET(paste("https://developer.nps.gov/api/v1/parks?stateCode=NC&api_key=",key$value,sep = ""))
raw_ParkIDs<- fromJSON(rawToChar(apiParks$content))
data_Parks<- raw_ParkIDs$data|>
  select(c(fullName,parkCode,description,states,id))
```

```{r}
```


Join function by park code

```{r}
name_Parks<- function(state, keyword = "parks"){
  apiParks<-GET(
    paste("https://developer.nps.gov/api/v1/parks?stateCode=",
          state,
          "&api_key=",
          key$value,
          sep = ""))
raw_ParkIDs<- fromJSON(rawToChar(apiParks$content))
data_Parks<- raw_ParkIDs$data|>
  select(c(fullName,parkCode,description,states,id))
return(data_Parks)
}
```

wrapper
```{r}
my_wrapper<- function (keyword , stateCode = "NC", y= NULL,key=source("ghost.r")){
  newUrl <- paste("https://developer.nps.gov/api/v1/",
                  keyword,
                  "?stateCode=",
                  stateCode,
                  "&api_key=",
                  key$value,
                  sep = "")
  if(keyword == "alerts"){
    y<-getAlerts(newUrl)
    
  }
  else if (keyword=="campgrounds"){
    y<-getCamp(newUrl)
  }
   x<-name_Parks(stateCode)
   cleaned<-right_join(x, y , by = "parkCode",keep = TRUE)
   return(cleaned)
 }
```

```{r}
name_Parks("NC")
getCamp(paste("https://developer.nps.gov/api/v1/campgrounds?stateCode=NC&api_key=",key$value,sep = ""))
test<-my_wrapper("campgrounds",stateCode = "NC")
test
```

